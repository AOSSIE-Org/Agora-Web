# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="%APPLICATION_SECRET_APPLICATION_SECRET%"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration

mongodb.uri=""
mongodb.uri=${?MONGO_URI}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

play.filters.headers.frameOptions="ALLOW-FROM http://*"
play.filters.headers.contentSecurityPolicy="frame-src * ;"
play.filters.disabled+=play.filters.csrf.CSRFFilter

# Registers the filters
# ~~~~~

# The application DI modules
# ~~~~~
play.modules.enabled += "module.BaseModule"
play.modules.enabled += "module.JobModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"
play.modules.enabled += "play.modules.swagger.SwaggerModule"
play.modules.enabled += "module.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.filters.enabled += "play.filters.cors.CORSFilter"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# The asset configuration
# ~~~~~
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

# Play mailer
play.mailer {
host = "smtp.sendgrid.net"
  port = 587
  tls = true
  user = ${?SENDGRID_USERNAME}
  password = ${?SENDGRID_PASSWORD}
}

# Swagger
api.version=1.0
swagger.api.info = {
  description : Agora REST API
  title : Agora API
}

# CORS filter configuration
play.filters.cors {

    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour

    # Whether to serve forbidden origins as non-CORS requests
    serveForbiddenOrigins = false
  }

  
  play.filters.hosts {
  # Allow requests to all host domains
  allowed = ["localhost:9000"]
  }

include "silhouette.conf"

include "applicationLocal.conf"