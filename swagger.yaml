swagger: "2.0"

info:
  version: 1.0.0
  title: Agora web API Spec
  description: A proposed openAPI specification for agora web

schemes:
  - https
host: agoravote.org
basePath: /apiV1
tags:
- name: "election"
  description: "Everything about your Elections"
- name: "user"
  description: "Operations about user"
- name: "oAuth"
  description: "Authentication and authorization operations"
- name: "guest"
  description: "Operations about guest"
  
paths: 
  /election:
    post:
      tags:
        - "election"
        - "user"
        - "guest"
      summary: "Creates a new election"
      description: "Adds a new election to the system."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "election"
          in: "body"
          description: "The election to create."
          schema:
            $ref: "#/definitions/Election"
        - name: "token"
          in: "header"
          description: "The JWT user token"
          required: false
          type: "string"
      responses:
        204:
          description: "Election succesfully created."
        400:
          description: "Election couldn't have been created."
  
  /election/{id}:
    get:
      tags:
        - "election"
        - "user"
        - "guest"
      summary: "Get an election"
      description: "Returns an election from it's id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The election ID"
          type: "string"
        - name: "token"
          in: "header"
          description: "The JWT user token"
          required: false
          type: "string"
      responses:
        200:
          description: "An election"
          schema: 
              $ref: "#/definitions/Election"
        404:
          description: "The Election does not exists."
        
    put:
      tags:
        - "election"
        - "user"
        - "guest"
      summary: "Updates an an election"
      description: "Update a particular election with the new information"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The election ID"
          type: "string"
        - name: "token"
          in: "header"
          description: "The JWT user token"
          required: false
          type: "string"
        - name: "election"
          in: "body"
          required: true
          description: "The election data"
          schema:
            $ref: "#/definitions/Election"
      responses:
        204:
            description: "Election succesfully updated."
        400:
            description: "Election couldn't be updated."
    
    delete:
      tags:
        - "election"
        - "user"
        - "guest"
      summary: "Delete's an election"
      description: "Delete's an election from the given id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The election ID"
          type: "string"
        - name: "token"
          in: "header"
          description: "The JWT user token"
          required: false
          type: "string"
      responses:
        200:
          description: "Election succesfully deleted"
        404:
          description: "The Election does not exists."
  
  /election/voter/{electionId}:
    put:
      tags:
        - "election"
        - "user"
      summary: "Add voter"
      description: "Add a voter for the election"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "electionId"
          in: "path"
          required: true
          description: "The election ID"
          type: "string"
        - name: "voter"
          in: "body"
          description: "The voters data"
          required: true
          schema:
            $ref: "#/definitions/Voter"
        - name: "token"
          in: "header"
          description: "The JWT user token"
          required: true
          type: "string"
      responses:
        200:
          description: "Election succesfully deleted"
        404:
          description: "The Election does not exists"
  
  /election/ballot/{id}:
    get:
      tags:
      - "user"
      - "guest"
      - "election"
      summary: "View ballot"
      description: "Returns all information about a particular ballot"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The Ballot ID"
          type: "string"
      responses:
        200:
          description: "A Ballot"
          schema: 
              $ref: "#/definitions/Ballot"
        404:
          description: "The Ballot does not exists"
  
  /user/signup:
    post:
      tags:
      - "oAuth"
      summary: "Create user"
      description: "This creates a new user from the credentials passed"
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  
  /user/login:
    get:
      tags:
      - "oAuth"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "login"
        in: "body"
        description: "The user login"
        required: true
        schema:
          $ref: "#/definitions/LoginInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "oAuth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserByID"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user ID that needs to be fetched."
        required: true
        type: "string"
      - name: "token"
        in: "header"
        description: "The JWT user token"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be updated"
        required: true
        type: "string"
      - name: "token"
        in: "header"
        description: "The JWT user token"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be deleted"
        required: true
        type: "string"
      - name: "token"
        in: "header"
        description: "The JWT user token"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
          
  /authenticate/{provider}:
    post:
      tags:
      - "oAuth"
      summary: "Authenticates a user"
      description: "Authenticates a user from a given provider"
      operationId: "authenticateFromProvider"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "provider"
        in: "path"
        description: "The name of the the provider"
        required: true
        type: "string"
      - name: "profile"
        in: "body"
        description: "The profile information about the user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
            description: "successful operation"
            schema:
              type: "string"
            headers:
              X-Expires-After:
                type: "string"
                format: "date-time"
                description: "date in UTC when token expires"
        400:
            description: "Could not authenticate with given provider"
  
  /guest/vote/{id}:
    post:
      tags:
      - "guest"
      summary: "Guest user votes"
      description: "Enables a guest user to vote for an election"
      operationId: "guestVote"
      consumes:
        - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The election Id for which the guest user is voting"
        required: true
        type: "string"
      responses:
        200:
          description: "Your vote was succesful"
        404:
          description: "No election with given Id found"
      

definitions:
  User:
    required:
      - email
      - userID
    properties:
      userID:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      email:
        type: string
      avatarURL:
        type: string

  Candidate:
    required:
      - id
      - name
    properties:
      name:
        type: string
      id:
        type: integer
        format: int64
      party:
        type: string
  
  Ballot:
    required:
      - voteBallot
      - voteEmail
    properties:
      voteBallot:
        type: string
      voteEmail:
        type: string
  
  Voter:
    required:
      - name
      - email
    properties:
      name:
        type: string
      email:
        type: string
  LoginInfo:
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  
  Winner:
    properties:
      candidate: 
        $ref: "#/definitions/Candidate"
      score:
        $ref: "#/definitions/Score"
  
  Score:
    properties:
      numerator:
        type: integer
      denominator:
        type: integer

        
  Election:
    required:
      - electionId
    properties:
      electionID:
        type: string
      name:
        type: string
      description:
        type: string
      creatorName:
        type: string
      creatorEmail:
        type: string
      startDate:
        type: string
        format: date
      endDate:
        type: string
        format: date
      realtime:
        type: boolean
      canditates:
        type: array
        items:
          $ref: "#/definitions/Candidate"
      ballotVisibility:
        type: string
      voterListVisibility:
        type: boolean
      isInvite:
        type: boolean
      isCompleted:
        type: boolean
      isStarted:
        type: boolean
      createdTime:
        type: string
        format: date-time
      adminLink:
        type: string
      inviteCode:
        type: string
      ballots:
        type: array
        items:
          $ref: "#/definitions/Ballot"
      voters:
        type: array
        items: 
          $ref: "#/definitions/Voter"
      winners:
        type: array
        items:
          $ref: "#/definitions/Winner"
      isCounted:
        type: boolean
      noVacancies:
        type: integer
      
        
        
        
        
        
        
        
        
        
        